import re
from string import capwords
from typing import Callable, Type

from pydantic import BaseModel, Field
from pydantic.dataclasses import dataclass
from pydantic_cli import run_and_exit, SubParser, run_sp_and_exit


def snake_to_pascal(s):
    r = capwords(s.replace('_',' '))
    r = r.replace(' ','')
    return r

def snake_to_kebab(s):
    return s.replace('_','-')


class BaseCLI:
    version = '0.0.0'

    class DefaultArgs(BaseModel):
        pass

    def _pre_common(self, a):
        pre_common = getattr(self, 'pre_common', None)
        if pre_common:
            pre_common(a)

    def wrap_runner(self, key):
        runner = getattr(self, key)
        def alt_runner(args):
            self.a = args
            self._pre_common(args)
            print(f'Starting <{key}>')
            print('Args')
            d = args.dict()
            maxlen = max(len(k) for k in d)
            for k, v in d.items():
                print(f'\t{k:<{maxlen+1}}: {v}')
            r =  runner(args)
            print(f'Done <{key}>')
            return r
        return alt_runner

    def register_subcommand(self, runners, name):
        if name:
            subcommand_name = snake_to_kebab(name)
            args_class_name = snake_to_pascal(name) + 'Args'
        else:
            name = 'default'
            subcommand_name = ''
            args_class_name = 'DefaultArgs'
        args_class = getattr(self, args_class_name, self.default_args_class)
        runners[subcommand_name] = SubParser(args_class, self.wrap_runner('run_' + name), f'sub command: {subcommand_name}')

    def __init__(self):
        self.a = None
        self.runners = {}
        self.default_args_class = getattr(self.__class__, 'CommonArgs', self.DefaultArgs)

        for key in dir(self):
            m = re.match(r'^run_(.*)$', key)
            if not m:
                continue
            name = m[1]
            self.register_subcommand(self.runners, name)

        # self.register_subcommand(self.runners, '')

    def run(self):
        return run_sp_and_exit(self.runners, version=self.version)
