import re
from string import capwords
from typing import Callable, Type

from pydantic import BaseModel, Field
from pydantic.dataclasses import dataclass
from pydantic_cli import run_and_exit, SubParser, run_sp_and_exit


class BaseCLI:
    version = '0.0.0'

    class DefaultArgs(BaseModel):
        pass

    def snake_to_pascal(self, s):
        r = capwords(s.replace('_',' '))
        r = r.replace(' ','')
        return r

    def snake_to_kebab(self, s):
        return s.replace('_','-')

    def wrap_runner(self, key):
        runner = getattr(self, key)
        def alt_runner(args):
            pre_common = getattr(self, 'pre_common', None)
            if pre_common:
                pre_common(args)
            print(f'Starting <{key}>')
            print('Args')
            d = args.dict()
            maxlen = max(len(k) for k in d)
            for k, v in d.items():
                print(f'\t{k:<{maxlen+1}}: {v}')
            r =  runner(args)
            print(f'Done <{key}>')
            return r
        return alt_runner

    def __init__(self):
        self.runners = {}

        default_args_class = getattr(self.__class__, 'CommonArgs', self.DefaultArgs)
        for key in dir(self):
            m = re.match(r'^run_(.*)$', key)
            if not m:
                continue
            snake_sub = m[1]
            pascal_sub = self.snake_to_pascal(snake_sub)
            kebab_sub = self.snake_to_kebab(snake_sub)
            arg_class = getattr(self, f'{pascal_sub}Args', default_args_class)
            self.runners[kebab_sub] = SubParser(arg_class, self.wrap_runner(key), f'sub command: {kebab_sub}')

    def run(self):
        return run_sp_and_exit(self.runners, version=self.version)
