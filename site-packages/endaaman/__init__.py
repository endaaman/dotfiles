import argparse
import re
from logging import getLogger
import time
from sys import exit

logger = getLogger(__name__)

def log(*args, **kwargs):
    print(*args, **kwargs)
    # logger.info(*args, **kwargs)

__all__ = ['endaaman']
__version__ = '0.0.0'


def curry(fn, *args, **kwds):
    def callit(*moreargs, **morekwds):
        kw = kwds.copy()
        kw.update(morekwds)
        return fn(*(args+moreargs), **kw)
    return callit

def Curry(c, *args, **kwargs):
    class Curried(c):
        def __init__(self, *more_args, **more_kwargs):
            kw = kwargs.copy()
            kw.update(more_kwargs)
            super().__init__(*(args + more_args), **kw)
    return Curried


class Commander():
    def try_exec(self, name, args, warn=True):
        f = getattr(self.obj, name, None)
        if not f:
            if warn:
                raise Exception(f'{name} is not defined')
            return False, None

        if not callable(f):
            raise Exception(f'{name} is not callable')
        return True, f(*args)

    def get_suffix(self):
        return '_' + self.args.suffix if self.args.suffix else ''

    def __init__(self, obj=None, with_torch=True, defaults={}):
        defaults = {**{ 'seed': 42 }, **defaults}
        self.obj = self
        self.with_torch = with_torch
        self._parser = argparse.ArgumentParser(add_help=False)
        self._common_parser = argparse.ArgumentParser(add_help=False)
        if self.with_torch:
            self._common_parser.add_argument('--cpu', action='store_true')
            self._common_parser.add_argument('--seed', type=int, default=defaults['seed'])
            self._common_parser.add_argument('--suffix')
        self.try_exec('arg_common', [self._common_parser], warn=False)
        subparsers = self._parser.add_subparsers()

        functions = [k[4:] for k in dir(self) if re.match(r'^run_.+', k)]
        for function in functions:
            function_as_param = re.sub('_', '-', function) # "_" -> "-"
            subparser = subparsers.add_parser(function_as_param, parents=[self._common_parser])
            arg_func_name = 'arg_' + function
            self.try_exec(arg_func_name, [subparser], warn=False)
            subparser.set_defaults(function=function)

    def arg_common(self, parser):
        pass

    def pre_common(self):
        pass

    def run_i(self):
        # for interupt
        pass

    def run(self, manul_args=None):
        self.args = self._parser.parse_args(manul_args or None)
        if self.with_torch:
            import torch
            self.use_gpu = not self.args.cpu and torch.cuda.is_available()
            self.use_multi_gpu = self.use_gpu and torch.cuda.device_count() > 1
            self.device = torch.device('cuda' if self.use_gpu else 'cpu')
            self.mode = 'multi GPU' if self.use_multi_gpu else 'single GPU' if self.use_gpu else 'CPU'

        if not hasattr(self.args, 'function'):
            self._parser.print_help()
            exit(0)

        function_as_param = self.args.function

        if self.with_torch:
            import numpy as np
            import random
            np.random.seed(self.args.seed)
            random.seed(self.args.seed)
            torch.manual_seed(self.args.seed)
            torch.cuda.manual_seed(self.args.seed)

        self.try_exec('pre_common', [], warn=False)
        function = re.sub('-', '_', function_as_param) # "-" -> "_"
        self.try_exec(f'pre_{function}', [], warn=False)

        func_name = f'run_{function}'
        log(f'Starting {func_name}()')
        args_names = vars(self.args).keys()
        if len(args_names) == 0:
            log('\t(no args provided)')
        else:
            maxlen = max([len(k) for k in args_names])
            items = vars(self.args).items()
            if self.with_torch:
                items = [('mode', self.mode), *items]
            for k, v in items:
                log(f'\t{k.ljust(maxlen)} : {v}')

        self.try_exec(func_name, [], warn=True)
        log('Done.')


class PlainCommander(Commander):
    def __init__(self):
        super().__init__(with_torch=False)


if __name__ == '__main__':
    class T(Commander):
        def arg_test(self, parser):
            parser.add_argument('-p', default='This is test')

        def run_test(self):
            print(f'-p: {self.args.p}')

        def pre_foo_bar(self, args):
            print('pre ----')

        def run_foo_bar(self, args):
            print('----')

    # Commander(T()).run()
    T().run(['test', '-p', '123'])
