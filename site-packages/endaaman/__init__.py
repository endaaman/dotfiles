import argparse
import re

__all__ = ['endaaman']
__version__ = '0.0.0'


def curry(*args, **kwds):
    def callit(*moreargs, **morekwds):
        kw = kwds.copy()
        kw.update(morekwds)
        return args[0](*(args[1:]+moreargs), **kw)
    return callit

def Curry(c, *args, **kwargs):
    class Curried(c):
        def __init__(self, *more_args, **more_kwargs):
            kw = kwargs.copy()
            kw.update(more_kwargs)
            super().__init__(*(args + more_args), **kw)
    return Curried


class Commander():
    def try_exec(self, name, args, warn=True):
        if not hasattr(self, name):
            if warn:
                raise Exception(f'{name} is not defined')
            return False, None

        f = getattr(self, name)
        if not hasattr(f, '__call__'):
            raise Exception(f'{name} is not callable')
        return True, f(*args)

    def __init__(self, is_ml=False):
        self.is_ml = is_ml
        parser = argparse.ArgumentParser(add_help=False)
        self.common_parser = argparse.ArgumentParser(add_help=False)
        if is_ml:
            self.common_parser.add_argument('--cpu', action='store_true')
        self.arg_common(self.common_parser)
        subparsers = parser.add_subparsers()

        targets = [k[4:] for k in dir(self) if re.match(r'^run_.+', k)]
        for target in targets:
            subparser = subparsers.add_parser(target, parents=[self.common_parser])
            arg_func_name = 'arg_' + target
            self.try_exec(arg_func_name, [subparser], warn=False)
            subparser.set_defaults(target=target)

        self.args = parser.parse_args()
        if not hasattr(self.args, 'target'):
            parser.print_help()
            exit(0)

        if is_ml:
            import torch
            self.use_gpu = not self.args.cpu and torch.cuda.is_available()
            self.use_multi_gpu = self.use_gpu and torch.cuda.device_count() > 1
            self.device = torch.device('cuda' if self.use_gpu else 'cpu')
            self.mode = 'multi GPU' if self.use_multi_gpu else 'single GPU' if self.use_gpu else 'CPU'

    def arg_common(self, parser):
        pass

    def pre_common(self):
        pass

    def run(self):
        target = self.args.target
        self.pre_common()
        self.try_exec(f'pre_{target}', [], warn=False)
        print('Starting...')
        args_names = vars(self.args).keys()
        if len(args_names) == 0:
            print('\t(no args provided)')
        else:
            maxlen = max([len(k) for k in args_names])
            items = vars(self.args).items()
            if self.is_ml:
                items = [('mode', self.mode), *items]
            for k, v in items:
                print(f'\t{k.ljust(maxlen)} : {v}')

        self.try_exec(f'run_{target}', [], warn=True)
        print('Done.')


class MLCommander(Commander):
    def __init__(self):
        super().__init__(is_ml=True)


if __name__ == '__main__':
    class T(Commander):
        def arg_test(self, parser):
            parser.add_argument('-p', default='This is test')

        def run_test(self):
            print('-p: ', self.args)

    T().run()
