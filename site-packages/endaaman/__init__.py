import argparse
import re
import torch

__all__ = ['endaaman']
__version__ = '0.0.0'


class Commander():
    def arg_common(self, parser):
        pass

    def __init__(self, trainer=False):
        self.trainer = trainer
        parser = argparse.ArgumentParser(add_help=False)
        self.common_parser = argparse.ArgumentParser(add_help=False)
        if trainer:
            self.common_parser.add_argument('--cpu', action='store_true')
        self.arg_common(self.common_parser)
        subparsers = parser.add_subparsers()

        targets = [k[4:] for k in dir(self) if re.match(r'^run_.+', k)]
        for target in targets:
            subparser = subparsers.add_parser(target, parents=[self.common_parser])
            arg_func_name = 'arg_' + target
            if hasattr(self, arg_func_name):
                f = getattr(self, arg_func_name)
                if hasattr(f, '__call__'):
                    f(subparser)
            subparser.set_defaults(target=target)

        self.args = parser.parse_args()
        if not hasattr(self.args, 'target'):
            parser.print_help()
            exit(0)


        if trainer:
            self.use_gpu = not self.args.cpu and torch.cuda.is_available()
            self.use_multi_gpu = self.use_gpu and torch.cuda.device_count() > 1
            self.device = torch.device('cuda' if self.use_gpu else 'cpu')
            self.mode = 'multi GPU' if self.use_multi_gpu else 'single GPU' if self.use_gpu else 'CPU'

    def run(self):
        print('Starting...')
        maxlen = max([len(k) for k in vars(self.args).keys()])
        items = vars(self.args).items()
        if self.trainer:
            items = ('mode', self.mode) + items
        for k, v in items:
            print(f'\t{k.ljust(maxlen)} : {v}')
        (self.args)
        print('Done.')


class Trainer():
    def __init__(self):
        super().__init__(self, True)
