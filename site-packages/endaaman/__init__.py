import argparse
import re
import torch

__all__ = ['endaaman']
__version__ = '0.0.0'


class Commander():
    def try_exec(self, name, args, warn=True):
        if hasattr(self, name):
            f = getattr(self, name)
            if hasattr(f, '__call__'):
                return True, f(*args)
            else:
                if warn:
                    raise Exception(f'{name} is not callable')
        else:
            if warn:
                raise Exception(f'{name} is invalid member')
        return False, None


    def __init__(self, is_trainer=False):
        self.is_trainer = is_trainer
        parser = argparse.ArgumentParser(add_help=False)
        self.common_parser = argparse.ArgumentParser(add_help=False)
        if is_trainer:
            self.common_parser.add_argument('--cpu', action='store_true')
        self.arg_common(self.common_parser)
        subparsers = parser.add_subparsers()

        targets = [k[4:] for k in dir(self) if re.match(r'^run_.+', k)]
        for target in targets:
            subparser = subparsers.add_parser(target, parents=[self.common_parser])
            arg_func_name = 'arg_' + target
            self.try_exec(arg_func_name, [subparser], warn=False)
            subparser.set_defaults(target=target)

        self.args = parser.parse_args()

        if is_trainer:
            self.use_gpu = not self.args.cpu and torch.cuda.is_available()
            self.use_multi_gpu = self.use_gpu and torch.cuda.device_count() > 1
            self.device = torch.device('cuda' if self.use_gpu else 'cpu')
            self.mode = 'multi GPU' if self.use_multi_gpu else 'single GPU' if self.use_gpu else 'CPU'

    def arg_common(self, parser):
        pass

    def run(self):
        target = 'default'
        if hasattr(self.args, 'target'):
            # parser.print_help()
            # exit(0)
            target = self.args.target

        self.try_exec(f'pre_{target}', [], warn=False)
        print('Starting...')
        args_names = vars(self.args).keys()
        if len(args_names) > 0:
            maxlen = max([len(k) for k in args_names])
            items = vars(self.args).items()
            if self.is_trainer:
                items = [('mode', self.mode), *items]
            for k, v in items:
                print(f'\t{k.ljust(maxlen)} : {v}')

        self.try_exec(f'run_{target}', [], warn=True)
        print('Done.')


class Trainer(Commander):
    def __init__(self):
        super().__init__(is_trainer=True)
