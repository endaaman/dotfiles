import os
from glob import glob
from PIL import Image

def paste_center(bg, fg, overwrite=False):
    # assert bg.width >= fg.width
    # assert bg.height >= fg.height
    x = (bg.width - fg.width) // 2
    y = (bg.height - fg.height) // 2
    if not overwrite:
        bg = bg.copy()
    bg.paste(fg, (x, y))
    return bg


def pad_to_size(img, size=None, color=None):
    if size:
        if hasattr(obj, '__len__'):
            assert len(size) == 2
        else:
            size = (size, size)
    else:
        long_side = max(img.size)
        size = (long_side, long_side)

    if img.width/img.height > size[0]/size[1]:
        # 横長
        scale = size[0]/img.width
    else:
        # 縦長
        scale = size[1]/img.height

    fg = img.resize((int(img.width*scale), int(img.height*scale)))
    bg = Image.new(mode=img.mode, size=size, color=color or 0)
    return paste_center(bg, fg)

def log(*args, **kwargs):
    print(*args, **kwargs)
    # logger.info(*args, **kwargs)


def get_images_from_dir_or_file(src, with_path=False):
    paths = []
    if os.path.isdir(src):
        paths = glob(os.path.join(src, '*.jpg')) + glob(os.path.join(src, '*.png'))
    elif os.path.isfile(src):
        paths = [src]
    if len(paths) == 0:
        raise RuntimeError(f'Invalid src: {src}')
    images = [Image.open(p) for p in paths]
    return images, paths if with_path else images

def curry(fn, *args, **kwds):
    def callit(*moreargs, **morekwds):
        kw = kwds.copy()
        kw.update(morekwds)
        return fn(*(args+moreargs), **kw)
    return callit

def Curry(c, *args, **kwargs):
    class Curried(c):
        def __init__(self, *more_args, **more_kwargs):
            kw = kwargs.copy()
            kw.update(more_kwargs)
            super().__init__(*(args + more_args), **kw)
    return Curried

class Counter():
    def __init__(self, limit):
        self.i = 0
        self.limit = limit

    def inc(self, diff=1):
        self.i += diff
        return self.i > self.limit


def tee(s, f):
    print(f(s))
    return s

def with_wrote(s):
    print('wrote', s)
    return s

def with_log(s, fmt):
    print(fmt.format(s))
    return s
