[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_i = 1
hook_add = '''
  let g:neoinclude#_paths = '/usr/lib/glib-2.0/include'
'''

[[plugins]]
repo = 'zchee/deoplete-clang'
on_i = 1
depends = ['deoplete.nvim']
hook_add = '''
  let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
  let g:deoplete#sources#clang#clang_header = '/usr/lib/clang'
'''

[[plugins]]
repo = 'kien/rainbow_parentheses.vim'
hook_add = '''
  let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
  let g:rbpt_max = 16
  let g:rbpt_loadcmd_toggle = 0
  augroup E
    autocmd! E
    autocmd Filetype scheme :RainbowParenthesesToggle
  augroup END
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = ['python']
hook_add = '''
  let g:jedi#auto_initialization = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#completions_enabled = 0
  let g:jedi#goto_command = "<Space>e"
'''

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'junegunn/fzf'
build = './install'
merged = 0
rtp = ''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']


[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  map ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'mattn/emmet-vim'
if = ''' 1 '''
hook_add = '''
  let g:user_emmet_leader_key='<C-e>'
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
if = ''' 0 '''
hook_add = '''
  set statusline+=%#warningmsg#
  " set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 0
  let g:syntastic_check_on_wq = 0

  let g:syntastic_enable_signs = 1
  let g:syntastic_error_symbol = ''
  let g:syntastic_warning_symbol = ''

  let g:syntastic_mode_map={
  \ 'mode': 'passive',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': []
  \}

  let g:syntastic_c_check_header = 1
  let g:syntastic_cpp_check_header = 1
  let g:syntastic_c_auto_refresh_includes = 1
  let g:syntastic_cpp_auto_refresh_includes = 1

  let g:syntastic_go_checkers = ['golint']
'''

############################################
################## syntax ##################
############################################

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown']
hook_add = '''
  let g:table_mode_always_active = 1
'''


[[plugins]]
repo = 'briancollins/vim-jst'
on_ft = ['ejs', 'jst']
if = ''' 0 '''
hook_add = '''
  autocmd BufNewFile,BufRead *.ejs set filetype=ejs
  autocmd BufNewFile,BufRead *._ejs set filetype=ejs

  function! s:DetectEjs()
      if getline(1) =~ '^#!.*\<ejs\>'
          set filetype=ejs
      endif
  endfunction

  autocmd BufNewFile,BufRead * call s:DetectEjs()
'''


[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'vue']


[[plugins]]
repo = 'posva/vim-vue' # remeber `npm i -g eslint eslint-plugin-vue`
on_ft = ['vue']
hook_add = '''
  " let g:vue_disable_pre_processors = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
# on_ft = ['go']
hook_add = '''
  let g:go_fmt_fail_silently = 1
  let g:go_fmt_command = 'goimports'
  let g:go_list_type = 'quickfix'

  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 3
  let g:go_highlight_structs = 3
  let g:go_doc_keywordprg_enabled = 0
'''

[[plugins]]
repo = 'jwalton512/vim-blade'
on_ft = ['php']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'keith/tmux.vim'
on_ft = ['tmux']

[[plugins]]
repo = 'tkztmk/vim-vala'
on_ft = ['vala']

[[plugins]]
repo = 'vim-scripts/nginx.vim'
on_ft = ['nginx']

[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']

[[plugins]]
repo = 'def-lkb/ocp-indent-vim'
on_ft = ['ocaml']

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']
hook_add = '''
  set hidden
  let g:racer_cmd = $HOME . '/.cargo/bin/racer'
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
  let g:rustfmt_autosave = 1
  let g:rustfmt_command = $HOME . '/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kotlin']

[[plugins]]
repo = 'baabelfish/nvim-nim'
if = ''' 0 '''
on_ft = ['nim']


############################################
################# vim ######################
############################################

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_add = '''
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

  let g:neocomplete#enable_at_startup = 1
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif

  let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  let g:neocomplete#sources#omni#input_patterns.go = '\h\w\.\w*'
  let g:neocomplete#sources#omni#input_patterns.py = '\h\w\.\w*'

  autocmd FileType python setlocal omnifunc=jedi#completions
'''

[[plugins]]
repo = 'Shougo/vimfiler'
depends = ['vimproc', 'unite.vim']
hook_add = '''
  " let g:vimfiler_as_default_explorer = 1
  " let g:vimfiler_edit_action = 'tabopen'
  let g:vimfiler_safe_mode_by_default = 0
  let g:vimfiler_ignore_pattern = ''
  autocmd FileType vimfiler nmap <buffer> <Enter>  <Plug>(vimfiler_expand_or_edit)
  autocmd FileType vimfiler nmap <buffer> o        <Plug>(vimfiler_cd_or_edit)
  autocmd FileType vimfiler nmap <buffer> H        <nop>
  autocmd FileType vimfiler nmap <buffer> h        <nop>
  autocmd FileType vimfiler nmap <buffer> l        <Plug>(vimfiler_expand_tree)
  let g:vimfiler_tree_leaf_icon = ' '
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_file_icon = ''
  let g:vimfiler_marked_file_icon = '*'
'''

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['vimproc', 'unite.vim']

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['vimproc']
hook_add = '''
  " let g:unite_source_grep_default_opts = '--nocolor --nogroup'
  let g:unite_source_grep_max_candidates = 200
  let g:unite_source_grep_recursive_opt = ''
  " let g:unite_enable_start_insert = 1
  let g:unite_source_history_yank_enable =1
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    let g:unite_source_grep_recursive_opt = ''
  endif

  call unite#custom#source('buffer', 'converters', ['converter_smart_path'])
  call unite#custom#source('file', 'matchers', 'matcher_default')

  nmap <Space> [unite]
  vnoremap /g y:Unite grep::-iRn:<C-r>=escape(@", "\\.*$^[]")<CR><CR>

  nnoremap <silent> [unite]a :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
  nnoremap <silent> [unite]f :<C-u>Unite<Space>file_mru<CR>
  nnoremap <silent> [unite]d :<C-u>Unite<Space>directory_mru<CR>
  nnoremap <silent> [unite]b :<C-u>Unite<Space>buffer<CR>
  nnoremap <silent> [unite]m :<C-u>Unite<Space>file_mru<CR>
  nnoremap <silent> [unite]r :<C-u>Unite<Space>register<CR>
  nnoremap <silent> [unite]t :<C-u>Unite<Space>tab<CR>
  nnoremap <silent> [unite]h :<C-u>Unite<Space>history/yank<CR>
  nnoremap <silent> [unite]o :<C-u>Unite<Space>outline<CR>
  nnoremap <silent> [unite]g :<C-u>Unite<Space>grep<CR>
  nnoremap <silent> [unite]<CR> :<C-u>Unite<Space>file_rec:!<CR>

  autocmd FileType unite call s:unite_my_settings()

  function! s:unite_my_settings()"{{{
    nmap <buffer> <ESC> <Plug>(unite_exit)
  endfunction"}}}
'''



