[[plugins]]
repo = 'neoclide/coc.nvim'
# rev = 'release'
hook_add = '''
  nnoremap <silent> <C-o> :call CocActionAsync('doHover')<CR>
  nmap <Space>kk <Plug>(coc-definition)

  " command! JumpToDefinitionInNewTab :tabedit % | call CocAction('jumpDefinition')
  command! JumpToDefinitionInNewTab :call CocAction('jumpDefinition', 'tab drop')
  nnoremap <silent> <Space>kK :<C-u>JumpToDefinitionInNewTab<CR>
  nmap <Space>kd <Plug>(coc-type-definition)
  nmap <Space>ki <Plug>(coc-implementation)
  nmap <Space>kr <Plug>(coc-references)
  nnoremap <C-f> :<C-u>CocNextSign<CR>
  nnoremap <C-b> :<C-u>CocPrevSign<CR>


  set updatetime=300
  au CursorHold * sil call CocActionAsync('highlight')
  au CursorHoldI * sil call CocActionAsync('showSignatureHelp')

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()

  inoremap <silent><expr> <S-TAB>
    \ pumvisible() ? "\<C-p>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
'''

[[plugins]]
repo = 'neoclide/coc-denite'
depends = ['coc.nvim', 'denite.nvim']
hook_add = '''
  " nnoremap <Space>J :<C-u>Denite coc-diagnostic -default-action=jump<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  nnoremap <Space>a :<C-u>Defx<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = '0'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
  endif
  let g:deoplete#omni#functions = {}
  " let g:deoplete#omni#input_patterns.python = '\h\w*\|[^. \t]\.\w*'
  " let g:deoplete#omni#functions.python = 'jedi#completions'
  inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
'''
hook_source = '''
  call deoplete#custom#option({
    \ 'auto_complete_delay': 100,
    \ 'camel_case': 1,
    \ 'ignore_case': 0,
    \ 'smart_case': 1,
    \ })
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
if = '0'
on_ft = ['python']
hook_add = '''
  let g:deoplete#sources#jedi#show_docstring = 0
'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
if = '0'
depends = ['deoplete.nvim']
on_ft = ['rust']
hook_add = '''
  " TODO: use
  "   system('which racer')
  " and
  "
  let g:deoplete#sources#rust#racer_binary = Chomp(system('which racer'))
  let g:deoplete#sources#rust#rust_source_path = Chomp(system('rustc --print sysroot')) . '/lib/rustlib/src/rust/src'
  let g:deoplete#sources#rust#show_duplicates = 1
  let g:deoplete#sources#rust#disable_keymap = 1
  " nnoremap <buffer> <Space>gd <plug>DeopleteRustGoToDefinitionDefault
  nnoremap <buffer> <Space>K <plug>DeopleteRustShowDocumentation
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  autocmd FileType denite let b:deoplete_disable_auto_complete = 1
  autocmd FileType denite-filter let b:deoplete_disable_auto_complete = 1

  nnoremap <Space>o :<C-u>Denite outline<CR>
  nnoremap <Space>O :<C-u>Denite file/old<CR>
  nnoremap <Space>J :<C-u>Denite jump<CR>
  nnoremap <Space>b :<C-u>Denite buffer<CR>
  nnoremap <Space>m :<C-u>Denite mark<CR>
  nnoremap <Space>M :<C-u>Denite menu<CR>
  nnoremap <Space>g :<C-u>Denite grep -no-empty<CR>
  nnoremap <Space>G :<C-u>Denite grep -input=`@0`<CR>
  nnoremap <Space>? :<C-u>Denite grep -input=`@/`<CR>
  nnoremap <Space>W :<C-u>DeniteCursorWord grep -no-empty<CR>
  nnoremap <Space>c :<C-u>Denite command<CR>
  nnoremap <Space>C :<C-u>Denite command_history<CR>
  nnoremap <Space>h :<C-u>Denite help -default-action=tabopen<CR>
  nnoremap <Space>p :<C-u>Denite my/register<CR>
  nnoremap <Space>P :<C-u>Denite my/register -default-action=prepend<CR>
  nnoremap <Space>r :<C-u>Denite my/register -default-action=yank<CR>
  nnoremap <Space>d :<C-u>Denite my/git/status<CR>
  nnoremap <Space>f :<C-u>Denite `finddir('.git', ';') != '' ? 'my/git/all' : 'file/rec'`<CR>
  nnoremap <Space>F :<C-u>DeniteCursorWord `finddir('.git', ';') != '' ? 'my/git/all' : 'file/rec'`<CR>
  nnoremap <Space>y :<C-u>Denite menu:yank<CR>
  nnoremap <Space>, :<C-u>Denite file/rec -path=,<CR>
  nnoremap <Space>a :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <Space>A :<C-u>Denite directory_rec<CR>
  nnoremap <Space>l :<C-u>Denite my/git/log<CR>
  nnoremap <Space><C-f> :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
  nnoremap <Space><C-b> :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>
  nnoremap <Space><Space> :<C-u>Denite -resume<CR>

  let s:menus = {}
  let s:menus.yank = { 'description': 'Yank file name or path' }
  let s:menus.yank.command_candidates = [
    \ ['File name', 'call YankFileName()'],
    \ ['Relative path', 'call YankRelativePath()'],
    \ ['Full path', 'call YankFullPath()'],
    \ ]
  let s:menus.CaseMaster = { 'description': 'Convert word case style' }
  let s:menus.CaseMaster.command_candidates = [
    \ ['To snake_case', 'CaseMasterConvertToSnake'],
    \ ['To kebab-case', 'CaseMasterConvertToKebab'],
    \ ['To camelCase', 'CaseMasterConvertToCamel'],
    \ ['To PascalCase', 'CaseMasterConvertToPascal'],
    \ ]
  let s:menus.Highlight = { 'description': 'Check highlight' }
  let s:menus.Highlight.command_candidates = [
    \ ['Highlight test', 'so $VIMRUNTIME/syntax/hitest.vim | execute "normal \<C-w>\T"'],
    \ ['Color test', 'so $VIMRUNTIME/syntax/colortest.vim | execute "normal \<C-w>\T"'],
    \ ]
  call denite#custom#var('menu', 'menus', s:menus)

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> <Esc> denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Tab> 'j'
    nnoremap <silent><buffer><expr> <S-Tab> 'k'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    inoremap <silent><buffer><expr> <Esc> denite#do_map('quit')

	  inoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
	  inoremap <silent><buffer> <Tab> <Esc><C-w>p:call cursor(line('.')+1,1)<CR><C-w>pA
	  inoremap <silent><buffer> <S-Tab> <Esc><C-w>p:call cursor(line('.')-1,1)<CR><C-w>pA

	  inoremap <silent><buffer> <C-a> <Home>
	  inoremap <silent><buffer> <C-e> <End>
    inoremap <silent><buffer> <C-d> <Delete>
	  inoremap <silent><buffer><expr> <C-t> denite#do_map('do_action', 'tabopen')
	  inoremap <silent><buffer><expr> <C-j> denite#do_map('choose_action')
  endfunction

  call denite#custom#action('command', 'tabopen', 'DeniteActionTabopen')
  call denite#custom#action('command', 'quit_if_empty_or_delete', 'DeniteActionQuitIfEmptyOrDelete')

  call denite#custom#source('_', 'matchers', ['matcher/regexp', 'matcher/substring'])

  call denite#custom#option('_', { 'highlight_matched_char': 'Title' })
  if get(g:, 'rich')
    call denite#custom#option('_', 'prompt', 'ï‚°')
  endif
  call denite#custom#option('_', 'start_filter', 1)

  call denite#custom#alias('source', 'my/git/all', 'file/rec')
  call denite#custom#var('my/git/all', 'command',
    \ ['git', 'ls-files', '--cached', '--others', '--exclude-standard'])
'''

[[plugins]]
repo = 'neoclide/coc-denite'
