[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  let g:context_filetype#search_offset = 10000
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
  set noshowmode
  " set cmdheight=2
  let g:echodoc#enable_at_startup = 1
  " let g:echodoc#enable_force_overwrite = 1
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo =  'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
  let g:rainbow_conf = {
    \  'guifgs': ['lightmagenta', 'lightred', ],
    \  'ctermfgs': ['lightmagenta', 'lightred', ],
    \  'operators': '_,_',
    \  'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \  'separately': {
    \    '*': {},
    \    'tex': {
    \      'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \    },
    \    'lisp': {
    \      'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \    },
    \    'vim': {
    \      'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \    },
    " \    'html': {
    " \      'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    " \    },
    " \    'blade': {
    " \      'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    " \    },
    \    'css': 0,
    \    'nerdtree': 0,
    \  }
    \}
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim', 'vim-textobj-user']
hook_add = '''
  let g:precious_enable_switchers = {
  \ '*' : {
  \  'setfiletype' : 1
  \ },
  \ 'vue' : {
  \  'setfiletype' : 1
  \ },
  \}
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  if get(g:, 'rich')
    let g:indentLine_char = ''
  else
    let g:indentLine_char = '¦'
  endif
  let g:vim_json_syntax_conceal = 0
  let g:indentLine_fileTypeExclude = ['nerdtree', 'markdown']
'''


# [[plugins]]
# repo = 'bronson/vim-trailing-whitespace'
# hook_add = '''
#   let g:extra_whitespace_ignored_filetypes = ['defx', 'qf']
# '''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_source = '''
  echom 'gutter'
  " let g:gitgutter_async = 0
  nnoremap <C-k> :<C-u>GitGutterPrevHunk<CR>
  nnoremap <C-j> :<C-u>GitGutterNextHunk<CR>
  autocmd EN BufWritePost * :GitGutter
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<Space>R'
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
  autocmd EN BufWritePre * :call NeomakeLocal()
  function! NeomakeLocal()
    Neomake
    " if &modified
    "   Neomake
    " endif
  endfunction

  let g:neomake_python_python_exe = 'python3'
  let g:neomake_python_enabled_makers = ['python']
  let g:neomake_php_enabled_makers = ['']
  let g:neomake_markdown_enabled_makers = ['']

  nnoremap <Space>n :<C-u>Neomake<CR>
  let g:neomake_open_list = 0

  if get(g:, 'rich')
    let g:neomake_error_sign = {
    \ 'text': '',
    \ 'texthl': 'Error',
    \ }
    let g:neomake_warning_sign = {
    \ 'text': '',
    \ 'texthl': 'Error',
    \ }
    let g:neomake_info_sign = {
    \ 'text': '',
    \ 'texthl': 'Title',
    \ }
    let g:neomake_message_sign = {
    \ 'text': '',
    \ 'texthl': 'Operator',
    \ }
  endif
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  " nnoremap ga :<C-u>EasyAlign<CR>
  " vnoremap ga :<C-u>EasyAlign<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  autocmd EN FileType nerdtree setlocal nolist

  function! NERDTreeCustom()
    if strlen(expand('%')) > 0
      NERDTreeFind
    else
      NERDTree
    endif
  endfunction
  command! -nargs=* -bar -bang -count=0 -complete=dir NERDTreeCustom <args>
  nnoremap <C-g> :<C-u>call NERDTreeCustom()<CR>

  let g:NERDTreeShowHidden = 1
  let g:NERDTreeHijackNetrw = 1
  let g:NERDTreeMinimalUI = 1
  let g:NERDTreeQuitOnOpen = 1
  let g:NERDTreeWinSize = 60

  let g:NERDTreeDirArrows = 1
  if get(g:, 'rich')
    let g:NERDTreeDirArrowCollapsible = nr2char(8200)
    let g:NERDTreeDirArrowExpandable = nr2char(8200)
  else
    let g:NERDTreeDirArrowExpandable = '|'
    let g:NERDTreeDirArrowCollapsible = '-'
  endif
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'aufgang001/vim-nerdtree_plugin_open'
hook_add = '''
  let g:nerdtree_plugin_open_cmd = 'xdg-open'
'''
