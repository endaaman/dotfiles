[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['vimproc']

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['vimproc', 'unite.vim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_post_source = '''
  execute 'UpdateRemotePlugin'
'''
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#enable_ignore_case = 0
  if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
  endif
  let g:deoplete#omni#functions = {}
  " let g:deoplete#omni#input_patterns.python = '\h\w*\|[^. \t]\.\w*'
  " let g:deoplete#omni#functions.python = 'jedi#completions'
  inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
'''
hook_source = '''
  call deoplete#custom#option({
    \ 'auto_complete_delay': 200,
    \ 'camel_case': v:true,
    \ 'ignore_case': v:false,
    \ 'smart_case': v:true,
    \ })
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['vimproc', 'unite.vim', 'unite-outline']
hook_post_source = '''
  execute 'UpdateRemotePlugin'
'''
hook_add = '''
  call denite#custom#map(
    \ '_',
    \ '<Tab>',
    \ '<denite:move_to_next_line>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ '_',
    \ '<S-Tab>',
    \ '<denite:move_to_previous_line>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ '_',
    \ '<C-d>',
    \ '<denite:quit>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ 'insert',
    \ '<C-j>',
    \ '<denite:choose_action>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ 'insert',
    \ '<C-t>',
    \ '<denite:do_action:tabopen>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ 'insert',
    \ '<C-p>',
    \ '<denite:do_action:split>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ 'insert',
    \ '<C-s>',
    \ '<denite:do_action:vsplit>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ 'insert',
    \ '<C-y>',
    \ '<denite:do_action:yank>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ 'insert',
    \ '<C-o>',
    \ '<denite:do_action:xdg-open>',
    \ 'noremap'
    \)
  call denite#custom#map('insert', '<C-a>', '<Home>')
  call denite#custom#map('insert', '<C-e>', '<End>')
  call denite#custom#map('insert', '<C-f>', '<Right>')
  call denite#custom#map('insert', '<C-b>', '<Left>')

  call denite#custom#action('file', 'xdg-open', 'DeniteActionXdgOpen')

  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs', [
    \ '*~', '*.o', '*.exe', '*.bak',
    \ '.DS_Store', '*.pyc', '*.sw[po]', '*.class',
    \ '.hg/', '.git/', '.bzr/', '.svn/',
    \ 'tags', 'tags-*',
    \ 'node_modules/', '*.ttf', 'vendor/'
    \ ])

  call denite#custom#source('_', 'matchers', ['matcher_substring'])
  call denite#custom#option('default', {
    \ 'highlight_matched_char': 'Title',
    \ })

  nnoremap <Space>u <Nop>
  nnoremap <Space>uo :<C-u>Denite unite:outline<CR>
  nnoremap <Space>b :<C-u>Denite buf<CR>
  nnoremap <Space>m :<C-u>Denite menu<CR>
  nnoremap <Space>o :<C-u>Denite jump<CR>
  nnoremap <Space>g :<C-u>Denite grep -no-empty<CR>
  nnoremap <Space>G :<C-u>Denite grep -no-empty -input=`@0`<CR>
  nnoremap <Space>W :<C-u>Denite grep -no-empty -input=`expand("<cword>")`<CR>
  nnoremap <Space>p :<C-u>Denite register<CR>
  nnoremap <Space>c :<C-u>Denite colorscheme<CR>
  nnoremap <Space>h :<C-u>Denite help<CR>
  nnoremap <Space>d :<C-u>Denite git/untracked git/staged git/modified<CR>
  " nnoremap <Space>f :<C-u>Denite git/all<CR>
  nnoremap <Space>f :<C-u>Denite
    \ `finddir('.git', ';') != '' ? 'git/all' : 'file_rec'`<CR>
  nnoremap <Space>y :<C-u>Denite menu:yank<CR>
  nnoremap <Space>, :<C-u>Denite file_rec -path=,<CR>
  nnoremap <Space>a :<C-u>DeniteBufferDir file_rec<CR>
  nnoremap <Space>z :<C-u>Denite -resume<CR>
  nnoremap <Space><Space> :<C-u>Denite -resume<CR>

  let s:menus = {}
  " let s:menus.files = { 'description': 'Bookmarked files' }
  " let s:menus.files.file_candidates = [
  "   \ ['vimrc', '~/.vimrc'],
  "   \ ]
  let s:menus.yank = { 'description': 'Yank' }
  let s:menus.yank.command_candidates = [
    \ ['File name', 'call YankFileName()'],
    \ ['Relative path', 'call YankRelativePath()'],
    \ ['Full path', 'call YankFullPath()'],
    \ ]
  call denite#custom#var('menu', 'menus', s:menus)

  call denite#custom#alias('source', 'git/all', 'file_rec')
  call denite#custom#var('git/all', 'command',
    \ ['git', 'ls-files', '--cached', '--others', '--exclude-standard'])

  call denite#custom#alias('source', 'git/modified', 'file_rec')
  call denite#custom#var('git/modified', 'command',
    \ ['git', 'diff', '--name-only'])

  call denite#custom#alias('source', 'git/staged', 'file_rec')
  call denite#custom#var('git/staged', 'command',
    \ ['git', 'diff', '--name-only', '--staged'])

  call denite#custom#alias('source', 'git/untracked', 'file_rec')
  call denite#custom#var('git/untracked', 'command',
    \ ['git', 'ls-files', '--others', '--exclude-standard'])

  if executable('ag')
    call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif

  " call denite#custom#source('file_mru', 'converters', ['converter_relative_word'])
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
hook_add = '''
  let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ }
'''
