[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'numirias/semshi'
if = ' 0 '
on_ft = ['python']

[[plugins]]
repo = 'bfredl/nvim-ipy'

# [[plugins]]
# repo = 'jupyter-vim/jupyter-vim'

# [[plugins]]
# repo = 'szkny/SplitTerm'
# # on_ft = ['python']
#
# [[plugins]]
# repo = 'szkny/Ipython'
# # depends = ['SplitTerm']
# on_ft = ['python']

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = ['markdown']
if = '0'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  let g:markdown_enable_spell_checking = 0
'''

[[plugins]]
repo = 'akhaku/vim-java-unused-imports'
on_ft = ['java']
hook_add = '''
  autocmd EN BufWritePost *.java UnusedImports
  autocmd EN BufEnter *.java UnusedImports
'''

# [[plugins]]
# repo = 'pangloss/vim-javascript'
# on_ft = ['javascript', 'vue']
#
# [[plugins]]
# repo = 'maxmellon/vim-jsx-pretty'
# on_ft = ['javascript', 'vue']

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug', 'vue']

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
  " let g:vue_pre_processors = ['pug']
  let g:vue_pre_processors = ['pug', 'scss']
  " let g:vue_pre_processors = 'detect_on_enter'
'''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'briancollins/vim-jst'
on_ft = ['ejs', 'jst']

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

[[plugins]]
repo = 'jwalton512/vim-blade'
on_ft = ['php']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'keith/tmux.vim'
on_ft = ['tmux']

[[plugins]]
repo = 'tkztmk/vim-vala'
on_ft = ['vala']

[[plugins]]
repo = 'vim-scripts/nginx.vim'
on_ft = ['nginx']

[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']

[[plugins]]
repo = 'def-lkb/ocp-indent-vim'
on_ft = ['ocaml']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_add = '''
  let g:rustfmt_autosave = 1
  let g:rustfmt_command = Chomp(system('which rustfmt'))
  autocmd EN FileType rust nmap <Plug>(go-to-def) :<C-u>call racer#GoToDefinition()<CR>
  autocmd EN FileType rust nmap <Plug>(go-to-def-tab) :<C-u>split<CR>:call racer#GoToDefinition()<CR><C-w>T
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']
hook_add = '''
  " set hidden
  let g:racer_cmd = Chomp(system('which racer'))
  let g:racer_experimental_completer = 1
'''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'
hook_source = '''
  let g:rust_doc#downloaded_rust_doc_dir = $HOME . '/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/share/doc/rust'
  let g:rust_doc#define_map_K = 0
  " nnoremap <buffer><silent> <Space>K :<C-u>RustDocFuzzy `expand("<cword>")`<CR>
  " nnoremap <buffer><silent>K :<C-u>call <SID>search_under_cursor(expand('<cword>'))<CR>
  " vnoremap <buffer><silent>K "gy:call <SID>search_under_cursor(getreg('g'))<CR>
'''

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'
