[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'endaaman/context_filetype.vim'

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
  set noshowmode
  let g:echodoc_enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'rking/ag.vim'

# [[plugins]]
# repo = 'junegunn/fzf'
# build = './install'
# merged = 0
# rtp = ''

# [[plugins]]
# repo = 'junegunn/fzf.vim'
# depends = ['fzf']

[[plugins]]
repo = 'chriskempson/base16-vim'
hook_add = '''
  " autocmd Endaaman VimEnter * nested colorscheme base16-default-dark
'''

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
  " autocmd Endaaman VimEnter * nested colorscheme tender
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  " autocmd Endaaman VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'kristijanhusak/vim-hybrid-material'
hook_add = '''
  autocmd Endaaman VimEnter * nested colorscheme hybrid_reverse
'''


[[plugins]]
repo = 'endaaman/lightline-hybrid.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['lightline-hybrid.vim']
hook_add = '''
  source ~/.vim/plugins/sub/lightline.vim
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  let g:DevIconsEnableFoldersOpenClose = 1
  let g:WebDevIconsUnicodeDecorateFileNodes = 1

  let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = ''

  let g:NERDTreeDirArrowExpandable = nr2char(8200)
  let g:NERDTreeDirArrowCollapsible = nr2char(8200)
  " let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
  " let g:DevIconsDefaultFolderOpenSymbol = ''
  " let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
  " let g:DevIconsDefaultFolderOpenSymbol = ''
  " let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
  " let g:DevIconsDefaultFolderOpenSymbol = ''
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
  let g:DevIconsDefaultFolderOpenSymbol = ''
  " let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = '▸'
  " let g:DevIconsDefaultFolderOpenSymbol = '▾'
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  " autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  autocmd FileType nerdtree setlocal nolist
  function! NERDTreeCustom()
    if strlen(expand('%')) > 0
      NERDTreeFind
    else
      NERDTree
    endif
  endfunction
  command! -nargs=* -bar -bang -count=0 -complete=dir NERDTreeCustom <args>
  nnoremap <C-g> :<C-u>call NERDTreeCustom()<CR>

  let g:NERDTreeShowHidden = 1
  let g:NERDTreeHijackNetrw = 1
  let g:NERDTreeMinimalUI = 1
  " let g:NERDTreeQuitOnOpen = 1

  autocmd FileType nerdtree setlocal nolist  "if you show hidden characters, this hides them in NERDTree
'''

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
  " let g:NERDTreeShowIgnoredStatus = 1
  let g:NERDTreeIndicatorMapCustom = {
  " \ 'Staged'    : '',
  \ 'Staged'    : '',
  \ 'Modified'  : '',
  \ 'Untracked' : '',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Deleted'   : '✖',
  \ 'Clean'     : '✔︎',
  \ 'Dirty'     : '',
  \ 'Ignored'   : '',
  \ 'Unknown'   : '?'
  \ }
'''

[[plugins]]
repo = 'aufgang001/vim-nerdtree_plugin_open'
hook_add = '''
  let g:nerdtree_plugin_open_cmd = 'xdg-open'
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim', 'vim-textobj-user']
hook_add = '''
  let g:precious_enable_switchers = {
  \ '*' : {
  \  'setfiletype' : 1
  \ },
  \ 'vue' : {
  \  'setfiletype' : 1
  \ },
  \}
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  map ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  " let g:indentLine_char = '¦'
  let g:indentLine_char = ''
  let g:indentLine_fileTypeExclude = ['nerdtree']
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<Space>r'
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'mattn/emmet-vim'
if = ''' 1 '''
hook_add = '''
  let g:user_emmet_leader_key='<C-e>'
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
if = ''' 0 '''
hook_add = '''
  set statusline+=%#warningmsg#
  " set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 0
  let g:syntastic_check_on_wq = 0

  let g:syntastic_enable_signs = 1
  let g:syntastic_error_symbol = ''
  let g:syntastic_warning_symbol = ''

  let g:syntastic_mode_map={
  \ 'mode': 'passive',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': []
  \}

  let g:syntastic_c_check_header = 1
  let g:syntastic_cpp_check_header = 1
  let g:syntastic_c_auto_refresh_includes = 1
  let g:syntastic_cpp_auto_refresh_includes = 1

  let g:syntastic_go_checkers = ['golint']
'''

[[plugins]]
repo = 'neomake/neomake'
if = ''' 1 '''
hook_add = '''
  autocmd! BufEnter * Neomake
  autocmd! BufWritePre * :call NeomakeIfModified()
  function! NeomakeIfModified()
    if &modified
      Neomake
    endif
  endfunction

  nnoremap <Space>n :Neomake
  let g:neomake_open_list = 0
  let g:neomake_error_sign = {
  \ 'text': '',
  \ 'texthl': 'Error',
  \ }
  let g:neomake_warning_sign = {
  \ 'text': '',
  \ 'texthl': 'Error',
  \ }
  let g:neomake_info_sign = {
  \ 'text': '',
  \ 'texthl': 'Title',
  \ }
  let g:neomake_message_sign = {
  \ 'text': '',
  \ 'texthl': 'Operator',
  \ }
'''
