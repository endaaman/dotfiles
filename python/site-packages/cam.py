
import json
import torchsummary
from PIL import Image
from torchvision import transforms
from torchvision.io import read_image
from torchvision.models import \
    resnet50, ResNet50_Weights, \
    efficientnet_b0, EfficientNet_B0_Weights, \
    efficientnet_b4, EfficientNet_B4_Weights, \
    efficientnet_b7, EfficientNet_B7_Weights, \
    efficientnet_v2_m, EfficientNet_V2_M_Weights, \
    vgg16_bn, VGG16_BN_Weights
import timm


import pytorch_grad_cam as CAM
from pytorch_grad_cam.utils.model_targets import BinaryClassifierOutputTarget

labels = json.load(open(',/labels.json'))
# model = timm.create_model('vit_base_patch16_384', pretrained=True)
model = timm.create_model('volo_d5_512', pretrained=True)

# weights = VGG16_BN_Weights.DEFAULT
# model = vgg16_bn(weights=weights)
# weights = EfficientNet_V2_M_Weights.DEFAULT
# model = efficientnet_v2_m(weights=weights)
# weights = EfficientNet_B7_Weights.DEFAULT
# model = efficientnet_b7(weights=weights)
# weights = EfficientNet_B4_Weights.DEFAULT
# model = efficientnet_b4(weights=weights)
# weights = EfficientNet_B0_Weights.DEFAULT
# model = efficientnet_b0(weights=weights)
# weights = ResNet50_Weights.DEFAULT
# model = resnet50(weights=weights)


filename = ',/dog.png'
# filename = ',/dog_cat.png'
# img2 = read_image(filename)[:3, ...]
# preprocess2 = weights.transforms()
# batch2 = preprocess2(img2)[None, ...]

size = 512
img = Image.open(filename).convert('RGB')
preprocess = transforms.Compose([
    transforms.ToTensor(),
    transforms.Resize((size, size), antialias=True),
    transforms.CenterCrop((size, size)),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])
batch = preprocess(img)[None, ...]

# gradcam = CAM.GradCAM(
#     model=model,
#     target_layers=[model.get_cam_layer()],
#     use_cuda=device=='cuda')

model.to('cuda')
batch = batch.to('cuda')
prediction = model(batch).squeeze(0).softmax(0)
class_id = prediction.argmax().item()
torchsummary.summary(model, input_size=(3, size, size))
print(labels[class_id], class_id)
