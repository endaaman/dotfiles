import json
import torchsummary
from PIL import Image
from torchvision import transforms
from torchvision.io import read_image
from torchvision.models import get_model, get_model_weights
import timm

import pytorch_grad_cam as CAM
from pytorch_grad_cam.utils.model_targets import BinaryClassifierOutputTarget

labels = json.load(open(',/labels.json'))

# torch
# name = 'efficientnet_b6'
name = 'efficientnet_v2_l'
weights = get_model_weights(name).DEFAULT
model = get_model(name, weights=weights)

# timm
model = timm.create_model('volo_d5_512', pretrained=True)

filename = ',/dog.png'
# filename = ',/dog_cat.png'
img2 = read_image(filename)[:3, ...]
print(type(img2))

size = 256
img = Image.open(filename).convert('RGB')
preprocess = transforms.Compose([
    transforms.ToTensor(),
    # transforms.Resize((size, size), antialias=True),
    # transforms.CenterCrop((size, size)),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])
# preprocess = weights.transforms()
batch = preprocess(img)[None, ...]


# gradcam = CAM.GradCAM(
#     model=model,
#     target_layers=[model.get_cam_layer()],
#     use_cuda=device=='cuda')

model.to('cuda')
batch = batch.to('cuda')
prediction = model(batch).squeeze(0).softmax(0)
class_id = prediction.argmax().item()
# torchsummary.summary(model, input_size=(3, size, size))
print(labels[class_id], class_id)
