import sys
import re
from string import capwords
import inspect
import asyncio
from typing import Callable, Type
import argparse

from pydantic import BaseModel, Field


def snake_to_pascal(s):
    r = capwords(s.replace('_',' '))
    r = r.replace(' ','')
    return r

def snake_to_kebab(s):
    return s.replace('_','-')


def field(default_value, long_arg, short_arg=None):
    if short_arg:
        cli = (long_arg, short_arg)
    else:
        cli = (long_arg, )
    return Field(default_value, cli=cli)

name2type = {
    'string': str,
    'number': float,
    'integer': int,
    'boolean': bool,
}

def register_cls_to_parser(cls, parser):
    for key, prop in cls.schema()['properties'].items():
        snake_key = key.replace('_', '-')
        args = [f'--{key}']
        if 's' in prop:
            args.append(prop['s'])

        kwargs = {}

        if 'description' in prop:
            kwargs['help'] = prop['description']

        if prop['type'] != 'boolean':
            kwargs['type'] = name2type[prop['type']]
            if 'default' in prop:
                kwargs['default'] = prop['default']
                kwargs['metavar'] = str(prop['default'])
            else:
                kwargs['required'] = True
                kwargs['metavar'] = ''
        else:
            if 'default' in prop:
                print('default value of bool is ignored.')
            kwargs['action'] = 'store_true'
        parser.add_argument(*args, **kwargs)


class BaseCLI:
    class CommonArgs(BaseModel):
        pass

    def _pre_common(self, a):
        pre_common = getattr(self, 'pre_common', None)
        if pre_common:
            pre_common(a)

    def wrap_runner(self, key):
        runner = getattr(self, key)
        def alt_runner(args):
            self.a = args
            self.function = key
            self._pre_common(args)
            print(f'Starting <{key}>')
            d = args.dict()
            if len(d) > 0:
                print('Args')
                maxlen = max(len(k) for k in d) if len(d) > 0 else -1
                for k, v in d.items():
                    print(f'\t{k:<{maxlen+1}}: {v}')
            else:
                print('No args')

            if inspect.iscoroutinefunction(runner):
                r = asyncio.run(runner(args))
            else:
                r =  runner(args)
            print(f'Done <{key}>')
            return r
        return alt_runner

    def __init__(self):
        self.a = None
        self.runners = {}
        self.function = None
        self.default_args_class = getattr(self.__class__, 'CommonArgs', self.CommonArgs)

        self.main_parser = argparse.ArgumentParser(add_help=False)
        sub_parsers = self.main_parser.add_subparsers()
        for key in dir(self):
            m = re.match(r'^run_(.*)$', key)
            if not m:
                continue
            name = m[1]

            subcommand_name = snake_to_kebab(name)
            args_class_name = snake_to_pascal(name) + 'Args'

            sub_parser = sub_parsers.add_parser(subcommand_name, parents=[self.main_parser])
            args_class = getattr(self, args_class_name, self.default_args_class)
            register_cls_to_parser(args_class, sub_parser)
            sub_parser.set_defaults(__function=name, __cls=args_class)



    def run(self):
        self.raw_args = self.main_parser.parse_args()
        if not hasattr(self.raw_args, '__function'):
            self.main_parser.print_help()
            exit(0)

        print(self.raw_args.__dict__['__cls'])

        self.raw_args.__dict__['__cls'].parse_obj({
            k:v for k, v in self.raw_args.__dict__ if not key.startswith('__')
        })

        # cls.parse_obj(parser.parse_args().__dict__)


class CLI(BaseCLI):
    class FooArgs(BaseCLI.CommonArgs):
        bar = 123

    def run_foo(self, a):
        print(a.bar)

    async def run_async(self, a):
        await asyncio.sleep(1)
        print('hi')
        await asyncio.sleep(1)
        print('hi')
        await asyncio.sleep(1)
        print('hi')
        print('async')

if __name__ == '__main__':
    cli = CLI()
    cli.run()
