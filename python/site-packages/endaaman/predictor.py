import os
import re
import math
import random
import subprocess
from abc import ABCMeta, abstractmethod
from typing import NamedTuple
from collections import OrderedDict
from datetime import datetime

import numpy as np
import matplotlib
from matplotlib import ticker, pyplot as plt
import torch
from torch import optim
from torch.optim.lr_scheduler import LambdaLR
from torch.utils.data import DataLoader
from tqdm import tqdm

from .trainer import BaseTrainerConfig, BaseTrainer, BEST_CHECKPOINT_FILE, CONFIG_FILE


class BasePredictor(metaclass=ABCMeta):
    def __init__(self, base_dir, use_gpu):
        self.checkpoint = checkpoint
        self.device = torch.device('cuda' if self.use_gpu and torch.cuda.is_available() else 'cpu')

        self.checkpoint = torch.load(J(base_dir, BEST_CHECKPOINT_FILE))
        with open(J(base_dir, CONFIG_FILE), mode='r', encoding='utf-8') as f:
            self.config_dict = json.load(f)

    @abstractmethod
    def prepare(self):
        return None

    def eval(self, inputs):
        self.model.to(self.device)
        with torch.set_grad_enabled(False):
            p = self.model(inputs.to(self.device))
            return p.cpu()
