// This code is under **Vim LICENSE**
// modified from https://github.com/artur-shaik/vim-javacomplete2/blob/master/classpath.gradle

class ClasspathPlugin implements Plugin<Project> {
  boolean isResolvable(Configuration conf) {
    // isCanBeResolved was added in Gradle 3.3. Previously, all configurations were resolvable
    if (Configuration.class.declaredMethods.any { it.name == 'isCanBeResolved' }) {
      return conf.canBeResolved
    }
    return true
  }

  Collection getBuildCacheForDependency(project, File dependency) {
    String name = dependency.getName()
    String home = System.getProperty("user.home")
    String gradleCache = home + '/.gradle/caches'
    if (new File(gradleCache).exists()) {
      String include = '**/' + name +  '/**/classes.jar'
      return project.fileTree(dir: gradleCache, include: include).files.findAll { it.isFile() }
    } else {
      return project.zipTree(dependency)
    }
  }

  void apply(Project project) {
    project.task('cp') {
      doLast {
        HashSet<String> cp = new HashSet<String>()
        HashSet<String> sp = new HashSet<String>()

        for (proj in project.rootProject.allprojects) {
          for (conf in proj.configurations) {
            if (isResolvable(conf)) {
              for (dependency in conf) {
                if (dependency.name.endsWith("jar")) {
                  cp += dependency
                } else {
                  cp += getBuildCacheForDependency(project, dependency)
                }
              }
            }
          }

          def rjava = proj.getBuildDir().absolutePath + File.separator + "intermediates" + File.separator + "classes" + File.separator + "debug"
          def rFiles = new File(rjava)
          if (rFiles.exists()) {
            cp += rFiles
          }

          if (proj.hasProperty("android")) {
            cp += proj.android.getBootClasspath()
            if (proj.android.hasProperty("applicationVariants")) {
              proj.android.applicationVariants.all { v ->
                if (v.hasProperty("compileConfiguration")) {
                  v.compileConfiguration.each { dependency ->
                    if (dependency.name.endsWith("jar")) {
                      cp += dependency
                    } else {
                      cp += getBuildCacheForDependency(project, dependency)
                    }
                  }
                }
                if (v.hasProperty("runtimeConfiguration")) {
                  v.runtimeConfiguration.each { dependency ->
                    if (dependency.name.endsWith("jar")) {
                      cp += dependency
                    } else {
                      cp += getBuildCacheForDependency(project, dependency)
                    }
                  }
                }
                if (v.hasProperty("getApkLibraries")) {
                  cp += v.getApkLibraries()
                }
                if (v.hasProperty("compileLibraries")) {
                  cp += v.getCompileLibraries()
                }
                for (srcSet in v.getSourceSets()) {
                  for (dir in srcSet.java.srcDirs) {
                    cp += dir.absolutePath
                  }
                }
                if (v.hasProperty("compileClasspath")) {
                  cp += v.compileClasspath().collect { it.getPath() }
                }
                // collect jar in build/*
                if (proj.hasProperty("buildDir")) {
                  def dir = new File("${proj.buildDir}/generated/source")
                  if (dir.exists()) {
                    dir.traverse([maxDepth: 0, type: groovy.io.FileType.DIRECTORIES]) {
                      sp += "${it.getPath()}/${v.getName()}"
                    }
                  }
                }
              }
            }

            if (proj.android.hasProperty("libraryVariants")) {
              proj.android.libraryVariants.all { v ->
                cp += v.javaCompile.classpath.files
                for (srcSet in v.getSourceSets()) {
                  for (dir in srcSet.java.srcDirs) {
                    cp += dir.absolutePath
                  }
                }
              }
            }
          }

          if (proj.hasProperty("sourceSets")) {
            for (srcSet in proj.sourceSets) {
              for (dir in srcSet.java.srcDirs) {
                cp += dir.absolutePath
              }
            }
          }
        }
        def cp_str = cp.collect({ ":${it}" }).join('')
        def sp_str = sp.collect({ ":${it}" }).join('')
        new File('.vim/').mkdir()
        new File('.vim/classpath.vim').write("let g:classpath = '${cp_str}'")
        new File('.vim/sourcepath.vim').write("let g:sourcepath = '${sp_str}'")
        println 'done'
      }
    }
  }
}

rootProject {
  apply plugin: ClasspathPlugin
}
