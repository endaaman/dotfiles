#!/usr/bin/env python3
import re
import os
import argparse
from itertools import filterfalse
import subprocess as sp


ROOT = os.getenv('GHR_ROOT') or os.getenv('HOME') + '/src'

# simple
#   endaaman/dotfiles
# other
#   http://githu.com/endaaman/dotfiles
#   git@github.com/
def get_clone_target_and_path(arg, is_ssh):
    simple = re.match(r'^[^/^@^:]+/[^/^@^:]+$', arg)
    if simple:
        path = arg
        if is_ssh:
            base = 'git@github.com:{}.git'
        else:
            base = 'https://github.com/{}.git'
        uri = base.format(arg)
        return uri, arg
    else:
        uri = arg
        m = re.search(r'([^/^@^:]+/[^/^@^:]+$)', arg)
        if not m:
            return None, None
        path = re.sub(r'\.git', '', m.group())
    return arg, path

class SubCommand():
    def register(self, p):
        pass
    def __call__(self, args):
        pass

class CommandList(SubCommand):
    name = 'list'

    def __call__(self, args):
        cmd = 'find {} -maxdepth 4 -mindepth 4 -follow -type d -name ".git"' \
              ' | sed -e s/.git$//' \
              ' | xargs readlink -f'
        p = sp.Popen(cmd.format(ROOT), shell=True, stdout=sp.PIPE)
        stdout_data, stderr_data = p.communicate()
        repos = stdout_data.decode().split('\n')
        for repo in repos:
            if not repo:
                continue
            print(repo)

class CommandGet(SubCommand):
    name = 'get'

    def register(self, p):
        p.add_argument('arg1')
        p.add_argument('-p', action='store_true') # ssh
        p.add_argument('-s', action='store_true') # dry
        # p.add_argument('-v', action='store_true') # verbose

    def __call__(self, args):
        is_ssh = args.p
        dryrun = args.s
        src, path = get_clone_target_and_path(args.arg1, is_ssh)
        if not src:
            print(f'Invalid src: `{src}`')
        dest_dir = '{}/github.com/{}'.format(ROOT, path)
        cmd = 'git clone {} {}'.format(src, dest_dir)
        if dryrun:
            print('CMD: ', cmd)
        else:
            p = sp.Popen(cmd, shell=True)
            p.wait()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand')
    subparsers.required = True
    commands = [CommandList(), CommandGet()]
    for c in commands:
        p = subparsers.add_parser(c.name)
        c.register(p)
        p.set_defaults(fn=c)
    args = parser.parse_args()
    args.fn(args)
