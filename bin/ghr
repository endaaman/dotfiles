#!/usr/bin/env python3
import re
import os
import argparse
from itertools import filterfalse
import subprocess as sp
from urllib.parse import urlparse


ROOT = os.getenv('GHR_ROOT') or os.getenv('HOME') + '/src'


def get_remote_url(domain, name, is_ssh):
    if is_ssh:
        return f'git@{domain}:{name}.git'
    return f'https://{domain}/{name}.git'

def get_clone_target(arg, is_ssh):
    # url like
    parsed = urlparse(arg)
    if parsed.netloc:
        name = re.sub(r'\.git$', '', parsed.path) # trim trailing .git
        name = re.sub(r'^/', '', name) # trim heading /
        if parsed.scheme == 'ssh':
            domain = re.sub('^[^@]*@', '', domain) # trim headind ssh username
            remote = arg
        else:
            domain = parsed.netloc
            remote = get_remote_url(domain, name, is_ssh)
        return {
            'remote': remote,
            'path': os.path.join(domain, name),
        }

    # git ssh
    # git@github.com:endaaman/tym.git
    matched = re.search(r'^(.*)@([^:^/]+):?(.*)$', arg)
    if matched:
        domain = matched.group(2)
        name = matched.group(3)
        name = re.sub(r'\.git$', '', name) # trim trailing .git
        name = re.sub(r'^/', '', name) # trim heading /
        return {
            'remote': arg,
            'path': os.path.join(domain, name),
        }

    # foo/bar
    if not re.match(r'^[^/^@^:]+/[^/^@^:]+$', arg):
        return None
    return {
        'remote': get_remote_url('github.com', arg, is_ssh),
        'path': os.path.join('github.com', arg)
    }

class SubCommand():
    def register(self, p):
        pass
    def __call__(self, args):
        pass

class CommandList(SubCommand):
    name = 'list'

    def __call__(self, args):
        cmd = 'find {} -maxdepth 4 -mindepth 3 -follow -type d -name ".git"' \
              ' | sed -e s/.git$//' \
              ' | xargs readlink -f'
        p = sp.Popen(cmd.format(ROOT), shell=True, stdout=sp.PIPE)
        stdout_data, stderr_data = p.communicate()
        repos = stdout_data.decode().split('\n')
        for repo in repos:
            if not repo:
                continue
            print(repo)

class CommandGet(SubCommand):
    name = 'get'

    def register(self, p):
        p.add_argument('arg1')
        p.add_argument('-p', action='store_true') # ssh
        p.add_argument('-s', action='store_true') # dry

    def __call__(self, args):
        is_ssh = args.p
        dryrun = args.s
        target = get_clone_target(args.arg1, is_ssh)
        if not target:
            print(f'Invalid argument: {args.arg1}')
            return
        dest_dir = os.path.join(ROOT, target['path'])
        cmd = f'git clone {target["remote"]} {dest_dir}'
        print(f'Exec: `{cmd}`')
        if dryrun:
            print('Skip execution')
            return
        p = sp.Popen(cmd, shell=True)
        p.wait()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand')
    subparsers.required = True
    commands = [CommandList(), CommandGet()]
    for c in commands:
        p = subparsers.add_parser(c.name)
        c.register(p)
        p.set_defaults(fn=c)
    args = parser.parse_args()
    args.fn(args)
